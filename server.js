require('dotenv').config();
const express = require('express');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
const cron = require('node-cron');
const app = express();
const PORT = process.env.PORT || 3000;
const TOKEN = process.env.TELEGRAM_BOT_TOKEN || process.env.BOT_TOKEN;
const PAYMENT_TOKEN = process.env.PAYMENT_TOKEN || process.env.TELEGRAM_PAYMENT_TOKEN;
const STARS_ENABLED = true; // –í–∫–ª—é—á–∏—Ç—å –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Stars
const PROVIDER_TOKEN = process.env.YUKASSA_PROVIDER_TOKEN; //

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
let bot;
try {
  bot = new TelegramBot(TOKEN, { 
    polling: {
      interval: 1000,
      autoStart: true,
      params: { timeout: 10 }
    }
  });
  console.log('ü§ñ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
  process.exit(1);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.on('error', (error) => console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error));
bot.on('polling_error', (error) => console.error('‚ùå –û—à–∏–±–∫–∞ polling:', error));

// –•—Ä–∞–Ω–∏–ª–∏—â–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–Ω—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userMenuMessages = new Map();

// –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const dataFile = path.join(__dirname, 'users.json');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö
if (!fs.existsSync(dataFile)) {
  const initialData = { users: [], notifications: [] };
  fs.writeFileSync(dataFile, JSON.stringify(initialData, null, 2));
  console.log('üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö');
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
function loadData() {
  try {
    const data = fs.readFileSync(dataFile, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    return { users: [], notifications: [] };
  }
}

function saveData(data) {
  try {
    fs.writeFileSync(dataFile, JSON.stringify(data, null, 2));
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
    return false;
  }
}

// –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã
const timezones = {
  '–ú–æ—Å–∫–≤–∞': 3,
  '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': 3,
  '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 5,
  '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 7,
  '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': 7,
  '–ò—Ä–∫—É—Ç—Å–∫': 8,
  '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫': 10,
  '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥': 2,
  '–°–∞–º–∞—Ä–∞': 4,
  '–û–º—Å–∫': 6,
  '–ß–µ–ª—è–±–∏–Ω—Å–∫': 5,
  '–ö–∞–∑–∞–Ω—å': 3,
  '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥': 3,
  '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É': 3,
  '–£—Ñ–∞': 5,
  '–ü–µ—Ä–º—å': 5
};

// –í—Ä–µ–º—è –¥–ª—è –≤—ã–±–æ—Ä–∞
const timeSlots = [
  '08:00', '08:30', '09:00', '09:30', '10:00', '10:30',
  '11:00', '11:30', '12:00', '12:30', '13:00', '13:30',
  '14:00', '14:30', '15:00', '15:30', '16:00', '16:30',
  '17:00', '17:30', '18:00', '18:30', '19:00', '19:30',
  '20:00'
];

// –¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
const messageTypes = {
  'motivational': '–ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ üåü',
  'simple': '–ü—Ä–æ—Å—Ç—ã–µ ‚è∞',
  'streak': '–° –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ üèÜ',
  'playful': '–ò–≥—Ä–∏–≤—ã–µ üéÆ'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é —Å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
async function sendMenuMessage(chatId, text, keyboard, userId = null) {
  try {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é –µ—Å–ª–∏ –µ—Å—Ç—å
    if (userId && userMenuMessages.has(userId)) {
      try {
        await bot.deleteMessage(chatId, userMenuMessages.get(userId));
      } catch (error) {
        // –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const sentMessage = await bot.sendMessage(chatId, text, { parse_mode: 'Markdown', ...keyboard });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (userId) {
      userMenuMessages.set(userId, sentMessage.message_id);
    }
    
    return sentMessage;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function editMenuMessage(chatId, messageId, text, keyboard) {
  try {
    await bot.editMessageText(text, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      ...keyboard
    });
  } catch (error) {
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    return await bot.sendMessage(chatId, text, { parse_mode: 'Markdown', ...keyboard });
  }
}

// API Endpoints
app.get('/api/telegram/status/:userId', (req, res) => {
  const userId = req.params.userId;
  
  try {
    const data = loadData();
    const user = data.users.find(u => u.userId === userId);
    
    if (user && user.hasStarted) {
      res.json({
        connected: true,
        enabled: user.enabled,
        time: user.time,
        timezone: user.timezone || '–ú–æ—Å–∫–≤–∞',
        type: user.reminderType || 'motivational'
      });
    } else {
      res.json({
        connected: false,
        enabled: false,
        time: '19:00',
        timezone: '–ú–æ—Å–∫–≤–∞',
        type: 'motivational'
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/api/telegram/connect', (req, res) => {
  const { userId } = req.body;
  
  try {
    const data = loadData();
    let user = data.users.find(u => u.userId === userId);
    
    if (user && user.hasStarted) {
      res.json({ 
        success: true, 
        message: '–£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω',
        botUsername: 'razvivay–∫–∞_bot'
      });
    } else {
      res.json({ 
        success: false, 
        message: '–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É /start',
        botUsername: 'razvivay–∫–∞_bot'
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/api/telegram/create-invoice', async (req, res) => {
  const { userId, amount, description, payload } = req.body;
  
  try {
    console.log('üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    
    if (!PAYMENT_TOKEN) {
      return res.status(400).json({ 
        success: false, 
        message: 'Payment token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' 
      });
    }

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ Telegram Bot API
    const invoiceData = {
      chat_id: userId,
      title: '–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –†–∞–∑–≤–∏–≤–∞–π–∫–∞',
      description: description || '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
      payload: payload || `premium_${Date.now()}`,
      provider_token: PAYMENT_TOKEN,
      currency: 'RUB',
      prices: [
        {
          label: '–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞',
          amount: (amount || 299) * 100 // –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        }
      ],
      start_parameter: 'premium_subscription',
      photo_url: 'https://your-domain.com/images/premium-badge.png', // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
      photo_size: 512,
      photo_width: 512,
      photo_height: 512,
      need_name: false,
      need_phone_number: false,
      need_email: false,
      need_shipping_address: false,
      send_phone_number_to_provider: false,
      send_email_to_provider: false,
      is_flexible: false
    };

    const response = await bot.sendInvoice(invoiceData.chat_id, invoiceData.title, invoiceData.description, invoiceData.payload, invoiceData.provider_token, invoiceData.currency, invoiceData.prices, {
      start_parameter: invoiceData.start_parameter,
      photo_url: invoiceData.photo_url,
      photo_size: invoiceData.photo_size,
      photo_width: invoiceData.photo_width,
      photo_height: invoiceData.photo_height,
      need_name: invoiceData.need_name,
      need_phone_number: invoiceData.need_phone_number,
      need_email: invoiceData.need_email,
      need_shipping_address: invoiceData.need_shipping_address,
      send_phone_number_to_provider: invoiceData.send_phone_number_to_provider,
      send_email_to_provider: invoiceData.send_email_to_provider,
      is_flexible: invoiceData.is_flexible
    });

    console.log('‚úÖ –ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    res.json({ 
      success: true, 
      message: '–ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω',
      invoiceId: response.message_id
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: ' + error.message 
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  
  console.log('üëã –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç:', userId);
  
  try {
    // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      await bot.deleteMessage(chatId, msg.message_id);
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å
    }
    
    const data = loadData();
    let user = data.users.find(u => u.userId === userId);
    
    if (!user) {
      user = {
        userId: userId,
        username: msg.from.username,
        firstName: msg.from.first_name,
        enabled: false,
        time: '19:00',
        timezone: '–ú–æ—Å–∫–≤–∞',
        reminderType: 'motivational',
        hasStarted: true,
        createdAt: new Date().toISOString(),
        lastActive: new Date().toISOString()
      };
      data.users.push(user);
    } else {
      user.hasStarted = true;
      user.lastActive = new Date().toISOString();
    }
    
    saveData(data);
    
    const welcomeMessage = `üåü **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –†–∞–∑–≤–∏–≤–∞–π–∫–∞!**

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ —Ä–∞–∑–≤–∏–≤–∞—é—â–∏—Ö –∑–∞–Ω—è—Ç–∏—è—Ö —Å —Ä–µ–±–µ–Ω–∫–æ–º!

üì± **–ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:**
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ —Å–∏–Ω—é—é –∫–Ω–æ–ø–∫—É "–û–¢–ö–†–´–¢–¨" –≤–Ω–∏–∑—É
‚Ä¢ –ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" –≤ –º–µ–Ω—é

–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:`;

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: 'https://telegram-mini-app-gules-nine.vercel.app/' } }],
          [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', callback_data: 'settings' }],
          [{ text: 'üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å', callback_data: 'status' }],
          [{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }]
        ]
      }
    };

    await sendMenuMessage(chatId, welcomeMessage, keyboard, userId);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /start:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

bot.onText(/\/settings/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  
  // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  try {
    await bot.deleteMessage(chatId, msg.message_id);
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º
  }
  
  showSettingsMenu(chatId, userId);
});

bot.onText(/\/status/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  
  // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  try {
    await bot.deleteMessage(chatId, msg.message_id);
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º
  }
  
  showStatus(chatId, userId);
});

bot.onText(/\/app/, async (msg) => {
  const chatId = msg.chat.id;
  
  // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  try {
    await bot.deleteMessage(chatId, msg.message_id);
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º
  }
  
  const message = `üöÄ **–û—Ç–∫—Ä—ã—Ç—å –†–∞–∑–≤–∏–≤–∞–π–∫–∞**

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:`;

  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: 'https://telegram-mini-app-gules-nine.vercel.app/' } }],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]
    }
  };

  bot.sendMessage(chatId, message, { parse_mode: 'Markdown', ...keyboard });
});

bot.on('successful_payment', async (msg) => {
  console.log('üí∞ –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂:', msg.successful_payment);
  
  try {
    const chatId = msg.chat.id;
    const userId = msg.from.id.toString();
    const payment = msg.successful_payment;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    const data = loadData();
    let user = data.users.find(u => u.userId === userId);
    
    if (user) {
      user.isPremium = true;
      user.premiumActivatedAt = new Date().toISOString();
      user.paymentHistory = user.paymentHistory || [];
      user.paymentHistory.push({
        id: payment.telegram_payment_charge_id,
        amount: payment.total_amount,
        currency: payment.currency,
        payload: payment.invoice_payload,
        timestamp: new Date().toISOString()
      });
      
      saveData(data);
      console.log('‚úÖ –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
    const successMessage = payment.currency === 'XTR' 
      ? `üåü **–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Stars —É—Å–ø–µ—à–Ω–∞!**

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!

üíé –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã:
‚Ä¢ –í—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ä–∞–∑–≤–∏—Ç–∏—è  
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã

üöÄ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏!`
      : `üí≥ **–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!**

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!

üí∞ –°—É–º–º–∞: ${payment.total_amount / 100} ${payment.currency}
üìß ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${payment.telegram_payment_charge_id}

üíé –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã:
‚Ä¢ –í—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ä–∞–∑–≤–∏—Ç–∏—è
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã

üöÄ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏!`;

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: 'https://your-app-url.com' } }],
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
      }
    };

    await bot.sendMessage(chatId, successMessage, { 
      parse_mode: 'Markdown',
      ...keyboard
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', error);
  }
});

bot.onText(/\/premium/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  
  // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  try {
    await bot.deleteMessage(chatId, msg.message_id);
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º
  }
  
  showPremiumMenu(chatId, userId);
});

// –§—É–Ω–∫—Ü–∏–∏ –º–µ–Ω—é
async function showMainMenu(chatId, userId) {
  const welcomeMessage = `üåü **–†–∞–∑–≤–∏–≤–∞–π–∫–∞ - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**

üì± –ù–∞–∂–º–∏—Ç–µ "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: 'https://telegram-mini-app-gules-nine.vercel.app/' } }],
        [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', callback_data: 'settings' }],
        [{ text: 'üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å', callback_data: 'status' }],
        [{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }]
      ]
    }
  };

  if (userMenuMessages.has(userId)) {
    try {
      await editMenuMessage(chatId, userMenuMessages.get(userId), welcomeMessage, keyboard);
    } catch (error) {
      await sendMenuMessage(chatId, welcomeMessage, keyboard, userId);
    }
  } else {
    await sendMenuMessage(chatId, welcomeMessage, keyboard, userId);
  }
}

async function showSettingsMenu(chatId, userId) {
  const data = loadData();
  const user = data.users.find(u => u.userId === userId);
  
  if (!user) {
    bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
    return;
  }

  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: user.enabled ? 'üîî –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' : 'üîï –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'toggle_notifications' }],
        [{ text: `‚è∞ –í—Ä–µ–º—è: ${user.time}`, callback_data: 'change_time' }],
        [{ text: `üåç –ì–æ—Ä–æ–¥: ${user.timezone}`, callback_data: 'change_timezone' }],
        [{ text: `üí¨ –¢–∏–ø: ${messageTypes[user.reminderType]}`, callback_data: 'change_type' }],
        [{ text: 'üì± –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'test_notification' }],
        [{ text: 'üí≥ –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º', callback_data: 'buy_premium' }],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]
    }
  };

  const message = `‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**

${user.enabled ? 'üü¢' : 'üî¥'} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${user.enabled ? '–í–∫–ª—é—á–µ–Ω—ã' : '–í—ã–∫–ª—é—á–µ–Ω—ã'}
‚è∞ –í—Ä–µ–º—è: ${user.time} 
üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${user.timezone} (UTC+${timezones[user.timezone]})
üí¨ –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π: ${messageTypes[user.reminderType]}`;

  if (userMenuMessages.has(userId)) {
    try {
      await editMenuMessage(chatId, userMenuMessages.get(userId), message, keyboard);
    } catch (error) {
      await sendMenuMessage(chatId, message, keyboard, userId);
    }
  } else {
    await sendMenuMessage(chatId, message, keyboard, userId);
  }
}

async function showStatus(chatId, userId) {
  const data = loadData();
  const user = data.users.find(u => u.userId === userId);
  
  if (!user) {
    bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
    return;
  }

  const status = user.enabled ? 'üü¢ –í–∫–ª—é—á–µ–Ω—ã' : 'üî¥ –í—ã–∫–ª—é—á–µ–Ω—ã';
  const nextNotification = user.enabled ? 
    `–°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è –≤ ${user.time} (${user.timezone})` : 
    '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã';

  const message = `üìä **–í–∞—à —Å—Ç–∞—Ç—É—Å**

${status}
‚è∞ ${nextNotification}
üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${user.timezone}
üí¨ –¢–∏–ø: ${messageTypes[user.reminderType]}`;

  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: '‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'settings' }],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]
    }
  };

  if (userMenuMessages.has(userId)) {
    try {
      await editMenuMessage(chatId, userMenuMessages.get(userId), message, keyboard);
    } catch (error) {
      await sendMenuMessage(chatId, message, keyboard, userId);
    }
  } else {
    await sendMenuMessage(chatId, message, keyboard, userId);
  }
}

async function showHelp(chatId, userId) {
  const helpMessage = `‚ùì **–°–ø—Ä–∞–≤–∫–∞**

**üì± –ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:**
1. –ù–∞–∂–º–∏—Ç–µ —Å–∏–Ω—é—é –∫–Ω–æ–ø–∫—É "–û–¢–ö–†–´–¢–¨" –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
2. –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" –≤ –ª—é–±–æ–º –º–µ–Ω—é
3. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø—Ä—è–º–æ –≤ Telegram!

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π  
/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
üåç –í—ã–±–æ—Ä —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
üí¨ –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

**–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:**
üåü –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ - –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚è∞ –ü—Ä–æ—Å—Ç—ã–µ - –∫—Ä–∞—Ç–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
üèÜ –° –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ - –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
üéÆ –ò–≥—Ä–∏–≤—ã–µ - –≤–µ—Å–µ–ª—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

**üÜò –ü—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–∫—Ä—ã—Ç–∏–µ–º?**
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è Telegram
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ /start –∑–∞–Ω–æ–≤–æ

–£–¥–∞—á–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è! üöÄ`;

  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: 'https://telegram-mini-app-gules-nine.vercel.app/' } }],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]
    }
  };

  if (userMenuMessages.has(userId)) {
    try {
      await editMenuMessage(chatId, userMenuMessages.get(userId), helpMessage, keyboard);
    } catch (error) {
      await sendMenuMessage(chatId, helpMessage, keyboard, userId);
    }
  } else {
    await sendMenuMessage(chatId, helpMessage, keyboard, userId);
  }
}

bot.on('pre_checkout_query', async (query) => {
  console.log('üí≥ Pre-checkout query:', query);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
    const payload = query.invoice_payload;
    
    if (payload.startsWith('premium_') || payload.startsWith('stars_premium_')) {
      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
      await bot.answerPreCheckoutQuery(query.id, true);
      console.log('‚úÖ Pre-checkout –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω');
    } else {
      // –û—Ç–∫–ª–æ–Ω—è–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂
      await bot.answerPreCheckoutQuery(query.id, false, {
        error_message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞'
      });
      console.log('‚ùå Pre-checkout –æ—Ç–∫–ª–æ–Ω–µ–Ω');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ pre-checkout:', error);
    await bot.answerPreCheckoutQuery(query.id, false, {
      error_message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞'
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
  const message = callbackQuery.message;
  const userId = callbackQuery.from.id.toString();
  const data = callbackQuery.data;

  try {
    if (data === 'main_menu') {
      await showMainMenu(message.chat.id, userId);
    } else if (data === 'settings') {
      await showSettingsMenu(message.chat.id, userId);
    } else if (data === 'status') {
      await showStatus(message.chat.id, userId);
    } else if (data === 'help') {
      await showHelp(message.chat.id, userId);
    } else if (data === 'toggle_notifications') {
      await toggleNotifications(message.chat.id, userId);
    } else if (data === 'change_time') {
      await showTimeMenu(message.chat.id, userId);
    } else if (data === 'change_timezone') {
      await showTimezoneMenu(message.chat.id, userId);
    } else if (data === 'change_type') {
      await showTypeMenu(message.chat.id, userId);
    } else if (data === 'test_notification') {
      await sendTestNotification(message.chat.id, userId);
    } else if (data === 'buy_premium') {
      await showPremiumMenu(message.chat.id, userId);
    } else if (data === 'pay_card') {
      await createCardPayment(message.chat.id, userId);
    } else if (data === 'pay_stars') {
      await createStarsPayment(message.chat.id, userId);
    } else if (data.startsWith('time_')) {
      const time = data.replace('time_', '');
      await setUserTime(message.chat.id, userId, time);
    } else if (data.startsWith('tz_')) {
      const timezone = data.replace('tz_', '').replace(/_/g, ' ');
      await setUserTimezone(message.chat.id, userId, timezone);
    } else if (data.startsWith('type_')) {
      const type = data.replace('type_', '');
      await setUserType(message.chat.id, userId, type);
    } else if (data === 'back_to_settings') {
      await showSettingsMenu(message.chat.id, userId);
    }

    bot.answerCallbackQuery(callbackQuery.id);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
    bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
  }
});

app.get('/api/telegram/premium-status/:userId', (req, res) => {
  const userId = req.params.userId;
  
  try {
    const data = loadData();
    const user = data.users.find(u => u.userId === userId);
    
    if (user) {
      res.json({
        isPremium: user.isPremium || false,
        activatedAt: user.premiumActivatedAt || null,
        paymentHistory: user.paymentHistory || []
      });
    } else {
      res.json({
        isPremium: false,
        activatedAt: null,
        paymentHistory: []
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/api/telegram/create-stars-invoice', async (req, res) => {
  const { userId, stars, description, payload } = req.body;
  
  try {
    console.log('‚≠ê –°–æ–∑–¥–∞–Ω–∏–µ Stars –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

    const invoiceData = {
      chat_id: userId,
      title: '–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –†–∞–∑–≤–∏–≤–∞–π–∫–∞',
      description: description || '–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Telegram Stars',
      payload: payload || `stars_premium_${Date.now()}`,
      currency: 'XTR', // –í–∞–ª—é—Ç–∞ –¥–ª—è Stars
      prices: [
        {
          label: '–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞',
          amount: stars || 50 // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥
        }
      ]
    };

    const response = await bot.sendInvoice(
      invoiceData.chat_id,
      invoiceData.title,
      invoiceData.description,
      invoiceData.payload,
      '', // provider_token –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è Stars
      invoiceData.currency,
      invoiceData.prices
    );

    console.log('‚úÖ Stars –∏–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    res.json({ 
      success: true, 
      message: 'Stars –∏–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω',
      invoiceId: response.message_id
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Stars –∏–Ω–≤–æ–π—Å–∞:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Stars –ø–ª–∞—Ç–µ–∂–∞: ' + error.message 
    });
  }
});

// –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
async function toggleNotifications(chatId, userId) {
  const data = loadData();
  const user = data.users.find(u => u.userId === userId);
  
  if (user) {
    user.enabled = !user.enabled;
    user.lastActive = new Date().toISOString();
    saveData(data);
    
    const status = user.enabled ? '–≤–∫–ª—é—á–µ–Ω—ã ‚úÖ' : '–≤—ã–∫–ª—é—á–µ–Ω—ã ‚ùå';
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const tempMessage = await bot.sendMessage(chatId, `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${status}`);
    
    // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(async () => {
      try {
        await bot.deleteMessage(chatId, tempMessage.message_id);
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å
      }
    }, 2000);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    setTimeout(() => showSettingsMenu(chatId, userId), 500);
  }
}

async function showTimeMenu(chatId, userId) {
  const timeButtons = [];
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
  for (let i = 0; i < timeSlots.length; i += 3) {
    const row = timeSlots.slice(i, i + 3).map(time => ({
      text: time,
      callback_data: `time_${time}`
    }));
    timeButtons.push(row);
  }
  
  timeButtons.push([{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data: 'back_to_settings' }]);

  const keyboard = { reply_markup: { inline_keyboard: timeButtons } };
  
  const message = '‚è∞ **–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:**';
  
  if (userMenuMessages.has(userId)) {
    try {
      await editMenuMessage(chatId, userMenuMessages.get(userId), message, keyboard);
    } catch (error) {
      await sendMenuMessage(chatId, message, keyboard, userId);
    }
  } else {
    await sendMenuMessage(chatId, message, keyboard, userId);
  }
}

async function showTimezoneMenu(chatId, userId) {
  const tzButtons = [];
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≥–æ—Ä–æ–¥–∞ –ø–æ 2 –≤ —Ä—è–¥
  const cities = Object.keys(timezones);
  for (let i = 0; i < cities.length; i += 2) {
    const row = cities.slice(i, i + 2).map(tz => ({
      text: `${tz}`,
      callback_data: `tz_${tz.replace(/ /g, '_')}`
    }));
    tzButtons.push(row);
  }
  
  tzButtons.push([{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data: 'back_to_settings' }]);

  const keyboard = { reply_markup: { inline_keyboard: tzButtons } };
  
  const message = 'üåç **–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:**';
  
  if (userMenuMessages.has(userId)) {
    try {
      await editMenuMessage(chatId, userMenuMessages.get(userId), message, keyboard);
    } catch (error) {
      await sendMenuMessage(chatId, message, keyboard, userId);
    }
  } else {
    await sendMenuMessage(chatId, message, keyboard, userId);
  }
}

async function showTypeMenu(chatId, userId) {
  const typeButtons = Object.entries(messageTypes).map(([key, value]) => [{
    text: value,
    callback_data: `type_${key}`
  }]);
  
  typeButtons.push([{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data: 'back_to_settings' }]);

  const keyboard = { reply_markup: { inline_keyboard: typeButtons } };
  
  const message = 'üí¨ **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:**';
  
  if (userMenuMessages.has(userId)) {
    try {
      await editMenuMessage(chatId, userMenuMessages.get(userId), message, keyboard);
    } catch (error) {
      await sendMenuMessage(chatId, message, keyboard, userId);
    }
  } else {
    await sendMenuMessage(chatId, message, keyboard, userId);
  }
}

async function setUserTime(chatId, userId, time) {
  const data = loadData();
  const user = data.users.find(u => u.userId === userId);
  
  if (user) {
    user.time = time;
    user.lastActive = new Date().toISOString();
    saveData(data);
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const tempMessage = await bot.sendMessage(chatId, `‚è∞ –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${time}`);
    
    setTimeout(async () => {
      try {
        await bot.deleteMessage(chatId, tempMessage.message_id);
      } catch (error) {}
    }, 2000);
    
    setTimeout(() => showSettingsMenu(chatId, userId), 500);
  }
}

async function setUserTimezone(chatId, userId, timezone) {
  const data = loadData();
  const user = data.users.find(u => u.userId === userId);
  
  if (user) {
    user.timezone = timezone;
    user.lastActive = new Date().toISOString();
    saveData(data);
    
    const tempMessage = await bot.sendMessage(chatId, `üåç –ì–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${timezone}`);
    
    setTimeout(async () => {
      try {
        await bot.deleteMessage(chatId, tempMessage.message_id);
      } catch (error) {}
    }, 2000);
    
    setTimeout(() => showSettingsMenu(chatId, userId), 500);
  }
}

async function setUserType(chatId, userId, type) {
  const data = loadData();
  const user = data.users.find(u => u.userId === userId);
  
  if (user) {
    user.reminderType = type;
    user.lastActive = new Date().toISOString();
    saveData(data);
    
    const tempMessage = await bot.sendMessage(chatId, `üí¨ –¢–∏–ø —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${messageTypes[type]}`);
    
    setTimeout(async () => {
      try {
        await bot.deleteMessage(chatId, tempMessage.message_id);
      } catch (error) {}
    }, 2000);
    
    setTimeout(() => showSettingsMenu(chatId, userId), 500);
  }
}

async function sendTestNotification(chatId, userId) {
  const data = loadData();
  const user = data.users.find(u => u.userId === userId);
  
  if (user) {
    const messages = getMessagesForType(user.reminderType);
    const message = messages[Math.floor(Math.random() * messages.length)];
    
    const testMessage = await bot.sendMessage(chatId, `üß™ **–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:**\n\n${message}`, { parse_mode: 'Markdown' });
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    setTimeout(async () => {
      try {
        await bot.deleteMessage(chatId, testMessage.message_id);
      } catch (error) {}
    }, 10000);
  }
}

async function showPremiumMenu(chatId, userId) {
  const data = loadData();
  const user = data.users.find(u => u.userId === userId);
  
  if (user && user.isPremium) {
    const message = `üëë **–ü—Ä–µ–º–∏—É–º —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω!**

‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω
üìÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: ${new Date(user.premiumActivatedAt).toLocaleDateString('ru-RU')}

–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã!`;

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: 'https://your-app-url.com' } }],
          [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data: 'back_to_settings' }]
        ]
      }
    };

    if (userMenuMessages.has(userId)) {
      try {
        await editMenuMessage(chatId, userMenuMessages.get(userId), message, keyboard);
      } catch (error) {
        await sendMenuMessage(chatId, message, keyboard, userId);
      }
    } else {
      await sendMenuMessage(chatId, message, keyboard, userId);
    }
    return;
  }

  const message = `üíé **–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –†–∞–∑–≤–∏–≤–∞–π–∫–∞**

üéØ **–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –ø—Ä–µ–º–∏—É–º:**
‚Ä¢ –í—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ä–∞–∑–≤–∏—Ç–∏—è
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –≤–∏–¥–µ–æ
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** 299‚ÇΩ/–º–µ—Å
‚≠ê **–ò–ª–∏:** 50 Telegram Stars

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:`;

  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π (299‚ÇΩ)', callback_data: 'pay_card' }],
        [{ text: '‚≠ê –û–ø–ª–∞—Ç–∏—Ç—å Stars (50‚≠ê)', callback_data: 'pay_stars' }],
        [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data: 'back_to_settings' }]
      ]
    }
  };

  if (userMenuMessages.has(userId)) {
    try {
      await editMenuMessage(chatId, userMenuMessages.get(userId), message, keyboard);
    } catch (error) {
      await sendMenuMessage(chatId, message, keyboard, userId);
    }
  } else {
    await sendMenuMessage(chatId, message, keyboard, userId);
  }
}

async function createCardPayment(chatId, userId) {
  try {
    if (!PAYMENT_TOKEN) {
      await bot.sendMessage(chatId, '‚ùå –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      return;
    }

    const invoiceData = {
      title: '–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –†–∞–∑–≤–∏–≤–∞–π–∫–∞',
      description: '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ 1 –º–µ—Å—è—Ü',
      payload: `premium_card_${userId}_${Date.now()}`,
      provider_token: PAYMENT_TOKEN,
      currency: 'RUB',
      prices: [
        {
          label: '–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞',
          amount: 29900 // 299 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        }
      ],
      start_parameter: 'premium_subscription',
      need_name: false,
      need_phone_number: false,
      need_email: false,
      need_shipping_address: false,
      send_phone_number_to_provider: false,
      send_email_to_provider: false,
      is_flexible: false
    };

    await bot.sendInvoice(
      chatId,
      invoiceData.title,
      invoiceData.description,
      invoiceData.payload,
      invoiceData.provider_token,
      invoiceData.currency,
      invoiceData.prices,
      {
        start_parameter: invoiceData.start_parameter,
        need_name: invoiceData.need_name,
        need_phone_number: invoiceData.need_phone_number,
        need_email: invoiceData.need_email,
        need_shipping_address: invoiceData.need_shipping_address,
        send_phone_number_to_provider: invoiceData.send_phone_number_to_provider,
        send_email_to_provider: invoiceData.send_email_to_provider,
        is_flexible: invoiceData.is_flexible
      }
    );

    console.log('‚úÖ –ò–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

async function createStarsPayment(chatId, userId) {
  try {
    const invoiceData = {
      title: '–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –†–∞–∑–≤–∏–≤–∞–π–∫–∞',
      description: '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Stars',
      payload: `stars_premium_${userId}_${Date.now()}`,
      currency: 'XTR',
      prices: [
        {
          label: '–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞',
          amount: 50 // 50 –∑–≤–µ–∑–¥
        }
      ]
    };

    await bot.sendInvoice(
      chatId,
      invoiceData.title,
      invoiceData.description,
      invoiceData.payload,
      '', // provider_token –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è Stars
      invoiceData.currency,
      invoiceData.prices
    );

    console.log('‚úÖ Stars –∏–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Stars –∏–Ω–≤–æ–π—Å–∞:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Stars –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º
function getMessagesForType(type) {
  const messages = {
    motivational: [
      'üåü –í—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è! –ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤—ã–º –æ—Ç–∫—Ä—ã—Ç–∏—è–º?',
      'üí´ –ü–æ—Ä–∞ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è! –ö–∞–∂–¥—ã–π –¥–µ–Ω—å - –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!',
      'üéØ –í—Ä–µ–º—è —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è! –í–∞—à –º–∞–ª—ã—à –∂–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!',
      'üöÄ –†–∞–∑–≤–∏–≤–∞–µ–º—Å—è –≤–º–µ—Å—Ç–µ! –°–µ–≥–æ–¥–Ω—è –∏–∑—É—á–∞–µ–º —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ?'
    ],
    simple: [
      '‚è∞ –í—Ä–µ–º—è –¥–ª—è –∑–∞–Ω—è—Ç–∏–π —Å —Ä–µ–±–µ–Ω–∫–æ–º',
      'üéØ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ä–∞–∑–≤–∏–≤–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö',
      'üìö –ü–æ—Ä–∞ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è!',
      '‚≠ê –í—Ä–µ–º—è —Ä–∞–∑–≤–∏—Ç–∏—è!'
    ],
    streak: [
      'üî• –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–µ—Ä–∏—é! –°–µ–≥–æ–¥–Ω—è –∑–∞–Ω–∏–º–∞–µ–º—Å—è?',
      'üèÜ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å - –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!',
      'üëë –í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º?',
      '‚≠ê –†–∞–∑–≤–∏–≤–∞–µ–º—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!'
    ],
    playful: [
      'üéÆ –í—Ä–µ–º—è –¥–ª—è –∏–≥—Ä –∏ —Ä–∞–∑–≤–∏—Ç–∏—è!',
      'üé™ –ê —á—Ç–æ, –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —É—Å—Ç—Ä–æ–∏–º –≤–µ—Å–µ–ª—ã–µ –∑–∞–Ω—è—Ç–∏—è?',
      'üéØ –ò–≥—Ä–∞–µ–º –∏ —Ä–∞–∑–≤–∏–≤–∞–µ–º—Å—è!',
      'üé® –¢–≤–æ—Ä–∏–º –∏ —É—á–∏–º—Å—è –≤–º–µ—Å—Ç–µ!'
    ]
  };
  
  return messages[type] || messages.motivational;
}

// Cron –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
cron.schedule('* * * * *', () => {
  try {
    const data = loadData();
    const now = new Date();
    
    data.users.forEach(user => {
      if (user.enabled && user.hasStarted) {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userTimezone = timezones[user.timezone] || 3;
        const userTime = new Date(now.getTime() + (userTimezone * 60 * 60 * 1000));
        const currentTime = userTime.toTimeString().slice(0, 5);
        
        if (user.time === currentTime) {
          const messages = getMessagesForType(user.reminderType);
          const message = messages[Math.floor(Math.random() * messages.length)];
          
          bot.sendMessage(user.userId, message)
            .then(() => {
              console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.userId}`);
            })
            .catch((error) => {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.userId}:`, error);
            });
        }
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ cron –∑–∞–¥–∞—á–µ:', error);
  }
});

// –ë–∞–∑–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req, res) => {
  res.json({ 
    message: 'Telegram Bot Server —Ä–∞–±–æ—Ç–∞–µ—Ç!', 
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const server = app.listen(PORT, '0.0.0.0', () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ keep-alive
server.keepAliveTimeout = 120000;
server.headersTimeout = 120000;

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
let isShuttingDown = false;

process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);

function gracefulShutdown(signal) {
  if (isShuttingDown) return;
  isShuttingDown = true;
  
  console.log(`üì§ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...`);
  
  if (bot) {
   try {
     bot.stopPolling();
     console.log('‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
   } catch (error) {
     console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞:', error);
   }
 }
 
 server.close((err) => {
   if (err) {
     console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Ä–≤–µ—Ä–∞:', err);
     process.exit(1);
   }
   console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
   process.exit(0);
 });
 
 setTimeout(() => {
   console.log('‚è∞ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ');
   process.exit(1);
 }, 10000);
}

process.on('uncaughtException', (error) => {
 console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
 gracefulShutdown('uncaughtException');
});

process.on('unhandledRejection', (reason) => {
 console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
 gracefulShutdown('unhandledRejection');
});

console.log('üéâ –°–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

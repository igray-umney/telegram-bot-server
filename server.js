console.log('üîÑ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');

require('dotenv').config();
console.log('üìÅ .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω');

const express = require('express');
console.log('üì¶ Express –∑–∞–≥—Ä—É–∂–µ–Ω');

const cors = require('cors');
console.log('üì¶ CORS –∑–∞–≥—Ä—É–∂–µ–Ω');

const TelegramBot = require('node-telegram-bot-api');
console.log('üì¶ TelegramBot –∑–∞–≥—Ä—É–∂–µ–Ω');

const cron = require('node-cron');
console.log('üì¶ node-cron –∑–∞–≥—Ä—É–∂–µ–Ω');

const app = express();
const PORT = process.env.PORT || 5000;
console.log('üîß Express app —Å–æ–∑–¥–∞–Ω, –ø–æ—Ä—Ç:', PORT);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const APP_URL = process.env.APP_URL || 'https://your-app.netlify.app';

console.log('üîë BOT_TOKEN –Ω–∞–π–¥–µ–Ω:', !!BOT_TOKEN);
console.log('üåê APP_URL:', APP_URL);

if (!BOT_TOKEN) {
  console.error('‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
  process.exit(1);
}

console.log('‚úÖ –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞...');

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true });
console.log('ü§ñ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω —Å polling');

// Middleware
app.use(cors());
app.use(express.json());

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π MongoDB/PostgreSQL)
let users = new Map();
let notifications = new Map();

console.log('üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const username = msg.from.username;
  const firstName = msg.from.first_name;

  console.log('üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', firstName, userId);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  users.set(userId, {
    chatId,
    username,
    firstName,
    active: true,
    notifications: false
  });

  const welcomeMessage = `üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –†–∞–∑–≤–∏–≤–∞–π–∫–∞!

–ü—Ä–∏–≤–µ—Ç, ${firstName}! –≠—Ç–æ –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Ä–∞–∑–≤–∏–≤–∞—é—â–∏—Ö –∑–∞–Ω—è—Ç–∏—è—Ö —Å –¥–µ—Ç—å–º–∏.

üéØ –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω—è—Ç–∏–π
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –°–ª–µ–¥–∏—Ç—å –∑–∞ –≤–∞—à–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º

–ö–æ–º–∞–Ω–¥—ã:
/app - –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
/help - –°–ø—Ä–∞–≤–∫–∞

–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" ‚¨áÔ∏è`;

  const options = {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            web_app: { url: APP_URL }
          }
        ],
        [
          { text: 'üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'setup_notifications' }
        ]
      ]
    }
  };

  bot.sendMessage(chatId, welcomeMessage, options);
});

bot.onText(/\/app/, (msg) => {
  const chatId = msg.chat.id;
  
  const options = {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            web_app: { url: APP_URL }
          }
        ]
      ]
    }
  };

  bot.sendMessage(chatId, 'üéØ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:', options);
});

bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  
  const helpMessage = `üì± –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é

üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/app - –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
–ë–æ—Ç –º–æ–∂–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω—è—Ç–∏–π —Å —Ä–µ–±–µ–Ω–∫–æ–º. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Ä–µ–º—è –∏ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.

‚ùì –í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã?
–ù–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É`;

  bot.sendMessage(chatId, helpMessage);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', (callbackQuery) => {
  const message = callbackQuery.message;
  const data = callbackQuery.data;
  const chatId = message.chat.id;
  const userId = callbackQuery.from.id;

  if (data === 'setup_notifications') {
    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üåÖ –£—Ç—Ä–æ–º (09:00)', callback_data: 'time_09:00' },
            { text: 'üåÜ –í–µ—á–µ—Ä–æ–º (19:00)', callback_data: 'time_19:00' }
          ],
          [
            { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', web_app: { url: APP_URL } }
          ]
        ]
      }
    };

    bot.editMessageText(
      '‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:',
      {
        chat_id: chatId,
        message_id: message.message_id,
        reply_markup: options.reply_markup
      }
    );
  }

  if (data.startsWith('time_')) {
    const time = data.replace('time_', '');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (users.has(userId)) {
      const user = users.get(userId);
      user.notifications = true;
      user.notificationTime = time;
      users.set(userId, user);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notifications.set(userId, {
      time: time,
      enabled: true,
      type: 'daily'
    });

    bot.editMessageText(
      `‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ ${time}!\n\n–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –∑–∞–Ω—è—Ç–∏—è—Ö –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —ç—Ç–æ –≤—Ä–µ–º—è.`,
      {
        chat_id: chatId,
        message_id: message.message_id
      }
    );

    console.log('üîî –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId, '–≤—Ä–µ–º—è:', time);
  }

  bot.answerCallbackQuery(callbackQuery.id);
});

// API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
app.post('/api/telegram/connect', (req, res) => {
  const { userId, username, settings } = req.body;

  console.log('üîó –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', userId);

  if (users.has(userId)) {
    const user = users.get(userId);
    user.notifications = true;
    user.notificationTime = settings.time;
    users.set(userId, user);

    notifications.set(userId, {
      time: settings.time,
      enabled: true,
      type: settings.reminderType || 'daily'
    });

    res.json({ success: true, message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω—ã' });
  } else {
    res.status(404).json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
app.post('/api/telegram/send-notification', (req, res) => {
  const { userId, message } = req.body;

  console.log('üìß –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', userId);

  if (users.has(userId)) {
    const user = users.get(userId);
    bot.sendMessage(user.chatId, `üîî ${message}`);
    res.json({ success: true, message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' });
  } else {
    res.status(404).json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
app.post('/api/telegram/create-invoice', async (req, res) => {
  const { userId, amount, description, payload } = req.body;

  try {
    console.log('üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    
    // –ü–æ–∫–∞ —á—Ç–æ —Å–∏–º—É–ª—è—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π –ø–ª–∞—Ç—ë–∂
    res.json({ 
      success: true, 
      invoiceUrl: 'https://t.me/invoice/test',
      message: '–§—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ' 
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞:', error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞' });
  }
});

// –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
cron.schedule('* * * * *', () => {
  const now = new Date();
  const currentTime = `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;
  
  // ===== –î–û–ë–ê–í–õ–Ø–ï–ú –û–¢–õ–ê–î–û–ß–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø =====
  console.log('‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏:', currentTime, 'UTC –≤—Ä–µ–º—è:', now.toISOString());
  console.log('üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', users.size);
  console.log('üîî –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', notifications.size);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  if (notifications.size > 0) {
    console.log('üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:');
    notifications.forEach((notification, userId) => {
      const user = users.get(userId);
      console.log(`  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user?.firstName || userId} (ID: ${userId})`);
      console.log(`    –í—Ä–µ–º—è: ${notification.time}, –í–∫–ª—é—á–µ–Ω–æ: ${notification.enabled}`);
    });
  } else {
    console.log('üì≠ –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
  }
  // ===== –ö–û–ù–ï–¶ –û–¢–õ–ê–î–ö–ò =====

  // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  notifications.forEach((notification, userId) => {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º: ${notification.time} === ${currentTime}? ${notification.time === currentTime}`);
    
    if (notification.enabled && notification.time === currentTime) {
      if (users.has(userId)) {
        const user = users.get(userId);
        console.log(`üì¨ –û–¢–ü–†–ê–í–õ–Ø–ï–ú —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${user.firstName} (${userId})`);
        
        const messages = [
          'üåü –í—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è! –ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤—ã–º –æ—Ç–∫—Ä—ã—Ç–∏—è–º?',
          'üéØ –ü–æ—Ä–∞ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è! –ö–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å!',
          'üí´ –í—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —Å –º–∞–ª—ã—à–æ–º!',
          'üöÄ –ì–æ—Ç–æ–≤—ã —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è? –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!'
        ];

        const randomMessage = messages[Math.floor(Math.random() * messages.length)];

        const options = {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                  web_app: { url: APP_URL }
                }
              ]
            ]
          }
        };

        bot.sendMessage(user.chatId, `üîî ${randomMessage}`, options)
          .then(() => {
            console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
          })
          .catch((error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.message);
          });
      } else {
        console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ users`);
      }
    }
  });
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
bot.onText(/\/time/, (msg) => {
  const chatId = msg.chat.id;
  const now = new Date();
  const utcTime = `${String(now.getUTCHours()).padStart(2, '0')}:${String(now.getUTCMinutes()).padStart(2, '0')}`;
  const serverTime = `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;
  
  let notificationsList = '';
  notifications.forEach((notification, userId) => {
    const user = users.get(userId);
    notificationsList += `${user?.firstName || userId}: ${notification.time}\n`;
  });
  
  bot.sendMessage(chatId, 
    `üïê –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${serverTime}\n` +
    `üåç UTC –≤—Ä–µ–º—è: ${utcTime}\n` +
    `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.size}\n` +
    `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${notifications.size}\n\n` +
    `üìã –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n${notificationsList || '–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'}`
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.on('polling_error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ polling:', error.message);
});

bot.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error.message);
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
app.get('/', (req, res) => {
  res.json({ 
    status: 'ok',
    message: 'Telegram Bot API –¥–ª—è –†–∞–∑–≤–∏–≤–∞–π–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    users: users.size,
    notifications: notifications.size,
    uptime: process.uptime()
  });
});

app.get('/status', (req, res) => {
  res.json({
    bot: 'online',
    users: users.size,
    notifications: notifications.size,
    uptime: process.uptime()
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log('üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É', PORT);
  console.log('üì± –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', users.size);
  console.log('üîî –ê–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', notifications.size);
  console.log('‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω');
  console.log('‚úÖ –í—Å—ë –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('unhandledRejection', (reason, promise) => {
  console.log('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
  console.log('‚ùå Uncaught Exception:', error);
  process.exit(1);
});

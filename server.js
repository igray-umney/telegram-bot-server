require('dotenv').config();
const express = require('express');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
const cron = require('node-cron');

const app = express();
const PORT = process.env.PORT || 3000;
const TOKEN = process.env.TELEGRAM_BOT_TOKEN;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
let bot;
try {
  bot = new TelegramBot(TOKEN, { 
    polling: {
      interval: 1000,
      autoStart: true,
      params: {
        timeout: 10
      }
    }
  });
  
  console.log('ü§ñ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
  process.exit(1);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
});

bot.on('polling_error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ polling:', error);
});

// –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const dataFile = path.join(__dirname, 'users.json');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö
if (!fs.existsSync(dataFile)) {
  const initialData = {
    users: [],
    notifications: []
  };
  fs.writeFileSync(dataFile, JSON.stringify(initialData, null, 2));
  console.log('üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö');
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
function loadData() {
  try {
    const data = fs.readFileSync(dataFile, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    return { users: [], notifications: [] };
  }
}

function saveData(data) {
  try {
    fs.writeFileSync(dataFile, JSON.stringify(data, null, 2));
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
    return false;
  }
}

// API Endpoints
app.get('/api/telegram/status/:userId', (req, res) => {
  const userId = req.params.userId;
  
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    
    const data = loadData();
    const user = data.users.find(u => u.userId === userId);
    
    if (user) {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', { userId: user.userId, enabled: user.enabled, time: user.time });
      res.json({
        connected: true,
        enabled: user.enabled,
        time: user.time,
        type: user.reminderType || 'motivational'
      });
    } else {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      res.json({
        connected: false,
        enabled: false,
        time: '19:00',
        type: 'motivational'
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/api/telegram/connect', (req, res) => {
  const { userId, username, settings } = req.body;
  
  try {
    console.log('üîó –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:', { userId, username });
    
    const data = loadData();
    let user = data.users.find(u => u.userId === userId);
    
    if (user) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user.enabled = true;
      user.time = settings.time;
      user.reminderType = settings.reminderType;
      user.lastActive = new Date().toISOString();
      console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user = {
        userId: userId,
        username: username,
        enabled: true,
        time: settings.time,
        reminderType: settings.reminderType,
        createdAt: new Date().toISOString(),
        lastActive: new Date().toISOString()
      };
      data.users.push(user);
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
    }
    
    if (saveData(data)) {
      res.json({ 
        success: true, 
        message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ',
        needsBotStart: !user.hasStarted 
      });
    } else {
      res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è' });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/api/telegram/send-notification', (req, res) => {
  const { userId, message } = req.body;
  
  try {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', { userId, message: message.substring(0, 50) + '...' });
    
    bot.sendMessage(userId, message)
      .then(() => {
        console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        res.json({ success: true });
      })
      .catch((error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
        res.status(500).json({ success: false, error: error.message });
      });
      
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  
  console.log('üëã –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç:', userId);
  
  try {
    const data = loadData();
    let user = data.users.find(u => u.userId === userId);
    
    if (user) {
      user.hasStarted = true;
      user.lastActive = new Date().toISOString();
      saveData(data);
    }
    
    const welcomeMessage = `
üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –†–∞–∑–≤–∏–≤–∞–π–∫–∞!

–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ –∑–∞–Ω—è—Ç–∏—è—Ö —Å —Ä–µ–±–µ–Ω–∫–æ–º –∏ –ø–æ–º–æ–≥–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.

–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è".

–£–¥–∞—á–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è! üöÄ`;

    bot.sendMessage(chatId, welcomeMessage);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /start:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// Cron –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
cron.schedule('* * * * *', () => {
  const now = new Date();
  const currentTime = now.toTimeString().slice(0, 5); // HH:MM
  
  console.log(`‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: ${currentTime}`);
  
  try {
    const data = loadData();
    console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${data.users.length}`);
    console.log(`üîî –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${data.notifications?.length || 0}`);
    
    data.users.forEach(user => {
      console.log(`üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.userId}: –≤—Ä–µ–º—è ${user.time}, –≤–∫–ª—é—á–µ–Ω–æ ${user.enabled}`);
      
      if (user.enabled && user.time === currentTime && user.hasStarted) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const messages = [
          `üåü –í—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è! –ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤—ã–º –æ—Ç–∫—Ä—ã—Ç–∏—è–º?`,
          `üí´ –ü–æ—Ä–∞ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è! –ö–∞–∂–¥—ã–π –¥–µ–Ω—å - –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!`,
          `üéØ –í—Ä–µ–º—è —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è! –í–∞—à –º–∞–ª—ã—à –∂–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!`
        ];
        
        const message = messages[Math.floor(Math.random() * messages.length)];
        
        bot.sendMessage(user.userId, message)
          .then(() => {
            console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.userId}`);
          })
          .catch((error) => {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.userId}:`, error);
          });
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ cron –∑–∞–¥–∞—á–µ:', error);
  }
});

// –ë–∞–∑–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req, res) => {
  res.json({ 
    message: 'Telegram Bot Server —Ä–∞–±–æ—Ç–∞–µ—Ç!', 
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
const server = app.listen(PORT, '0.0.0.0', () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üåê URL: http://localhost:${PORT}`);
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ keep-alive
server.keepAliveTimeout = 120000;
server.headersTimeout = 120000;

// –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
let isShuttingDown = false;

process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);

function gracefulShutdown(signal) {
  if (isShuttingDown) return;
  isShuttingDown = true;
  
  console.log(`üì§ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –Ω–∞—á–∏–Ω–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...`);
  
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
  if (bot) {
    try {
      bot.stopPolling();
      console.log('‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞:', error);
    }
  }
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
  server.close((err) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Ä–≤–µ—Ä–∞:', err);
      process.exit(1);
    }
    
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    process.exit(0);
  });
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    console.log('‚è∞ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞');
    process.exit(1);
  }, 10000);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  gracefulShutdown('uncaughtException');
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
  gracefulShutdown('unhandledRejection');
});

console.log('üéâ –°–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ (–ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞)
const userMenuMessages = new Map(); // –•—Ä–∞–Ω–∏—Ç ID —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–Ω—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ –º–µ–Ω—é –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
async function sendMenuMessage(chatId, text, keyboard, userId = null) {
  try {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é –µ—Å–ª–∏ –µ—Å—Ç—å
    if (userId && userMenuMessages.has(userId)) {
      try {
        await bot.deleteMessage(chatId, userMenuMessages.get(userId));
      } catch (error) {
        // –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const sentMessage = await bot.sendMessage(chatId, text, keyboard);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (userId) {
      userMenuMessages.set(userId, sentMessage.message_id);
    }
    
    return sentMessage;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function editMenuMessage(chatId, messageId, text, keyboard) {
  try {
    await bot.editMessageText(text, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      ...keyboard
    });
  } catch (error) {
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
    return await bot.sendMessage(chatId, text, { parse_mode: 'Markdown', ...keyboard });
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  
  console.log('üëã –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç:', userId);
  
  try {
    // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      await bot.deleteMessage(chatId, msg.message_id);
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å
    }
    
    const data = loadData();
    let user = data.users.find(u => u.userId === userId);
    
    if (!user) {
      user = {
        userId: userId,
        username: msg.from.username,
        firstName: msg.from.first_name,
        enabled: false,
        time: '19:00',
        timezone: '–ú–æ—Å–∫–≤–∞',
        reminderType: 'motivational',
        hasStarted: true,
        createdAt: new Date().toISOString(),
        lastActive: new Date().toISOString()
      };
      data.users.push(user);
    } else {
      user.hasStarted = true;
      user.lastActive = new Date().toISOString();
    }
    
    saveData(data);
    
    const welcomeMessage = `üåü **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –†–∞–∑–≤–∏–≤–∞–π–∫–∞!**

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ —Ä–∞–∑–≤–∏–≤–∞—é—â–∏—Ö –∑–∞–Ω—è—Ç–∏—è—Ö —Å —Ä–µ–±–µ–Ω–∫–æ–º!

–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:`;

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', callback_data: 'settings' }],
          [{ text: 'üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å', callback_data: 'status' }],
          [{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }]
        ]
      }
    };

    await sendMenuMessage(chatId, welcomeMessage, keyboard, userId);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /start:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
bot.onText(/\/settings/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  
  // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  try {
    await bot.deleteMessage(chatId, msg.message_id);
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º
  }
  
  showSettingsMenu(chatId, userId);
});

bot.onText(/\/status/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  
  // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  try {
    await bot.deleteMessage(chatId, msg.message_id);
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º
  }
  
  showStatus(chatId, userId);
});

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function showSettingsMenu(chatId, userId) {
  const data = loadData();
  const user = data.users.find(u => u.userId === userId);
  
  if (!user) {
    bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
    return;
  }

  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: user.enabled ? 'üîî –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' : 'üîï –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'toggle_notifications' }],
        [{ text: `‚è∞ –í—Ä–µ–º—è: ${user.time}`, callback_data: 'change_time' }],
        [{ text: `üåç –ì–æ—Ä–æ–¥: ${user.timezone}`, callback_data: 'change_timezone' }],
        [{ text: `üí¨ –¢–∏–ø: ${messageTypes[user.reminderType]}`, callback_data: 'change_type' }],
        [{ text: 'üì± –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'test_notification' }],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]
    }
  };

  const message = `‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**

${user.enabled ? 'üü¢' : 'üî¥'} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${user.enabled ? '–í–∫–ª—é—á–µ–Ω—ã' : '–í—ã–∫–ª—é—á–µ–Ω—ã'}
‚è∞ –í—Ä–µ–º—è: ${user.time} 
üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${user.timezone} (UTC+${timezones[user.timezone]})
üí¨ –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π: ${messageTypes[user.reminderType]}`;

  // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
  if (userMenuMessages.has(userId)) {
    try {
      await editMenuMessage(chatId, userMenuMessages.get(userId), message, keyboard);
    } catch (error) {
      await sendMenuMessage(chatId, message, keyboard, userId);
    }
  } else {
    await sendMenuMessage(chatId, message, keyboard, userId);
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞
async function showStatus(chatId, userId) {
  const data = loadData();
  const user = data.users.find(u => u.userId === userId);
  
  if (!user) {
    bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
    return;
  }

  const status = user.enabled ? 'üü¢ –í–∫–ª—é—á–µ–Ω—ã' : 'üî¥ –í—ã–∫–ª—é—á–µ–Ω—ã';
  const nextNotification = user.enabled ? 
    `–°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è –≤ ${user.time} (${user.timezone})` : 
    '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã';

  const message = `üìä **–í–∞—à —Å—Ç–∞—Ç—É—Å**

${status}
‚è∞ ${nextNotification}
üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${user.timezone}
üí¨ –¢–∏–ø: ${messageTypes[user.reminderType]}`;

  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: '‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'settings' }],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]
    }
  };

  if (userMenuMessages.has(userId)) {
    try {
      await editMenuMessage(chatId, userMenuMessages.get(userId), message, keyboard);
    } catch (error) {
      await sendMenuMessage(chatId, message, keyboard, userId);
    }
  } else {
    await sendMenuMessage(chatId, message, keyboard, userId);
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
  const message = callbackQuery.message;
  const userId = callbackQuery.from.id.toString();
  const data = callbackQuery.data;

  try {
    if (data === 'main_menu') {
      await showMainMenu(message.chat.id, userId);
    } else if (data === 'settings') {
      await showSettingsMenu(message.chat.id, userId);
    } else if (data === 'status') {
      await showStatus(message.chat.id, userId);
    } else if (data === 'help') {
      await showHelp(message.chat.id, userId);
    } else if (data === 'toggle_notifications') {
      await toggleNotifications(message.chat.id, userId);
    } else if (data === 'change_time') {
      await showTimeMenu(message.chat.id, userId);
    } else if (data === 'change_timezone') {
      await showTimezoneMenu(message.chat.id, userId);
    } else if (data === 'change_type') {
      await showTypeMenu(message.chat.id, userId);
    } else if (data === 'test_notification') {
      await sendTestNotification(message.chat.id, userId);
    } else if (data.startsWith('time_')) {
      const time = data.replace('time_', '');
      await setUserTime(message.chat.id, userId, time);
    } else if (data.startsWith('tz_')) {
      const timezone = data.replace('tz_', '').replace(/_/g, ' ');
      await setUserTimezone(message.chat.id, userId, timezone);
    } else if (data.startsWith('type_')) {
      const type = data.replace('type_', '');
      await setUserType(message.chat.id, userId, type);
    } else if (data === 'back_to_settings') {
      await showSettingsMenu(message.chat.id, userId);
    }

    bot.answerCallbackQuery(callbackQuery.id);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
    bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
  }
});

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async function showMainMenu(chatId, userId) {
  const welcomeMessage = `üåü **–†–∞–∑–≤–∏–≤–∞–π–∫–∞ - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', callback_data: 'settings' }],
        [{ text: 'üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å', callback_data: 'status' }],
        [{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }]
      ]
    }
  };

  if (userMenuMessages.has(userId)) {
    try {
      await editMenuMessage(chatId, userMenuMessages.get(userId), welcomeMessage, keyboard);
    } catch (error) {
      await sendMenuMessage(chatId, welcomeMessage, keyboard, userId);
    }
  } else {
    await sendMenuMessage(chatId, welcomeMessage, keyboard, userId);
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–º–æ—â–∏
async function showHelp(chatId, userId) {
  const helpMessage = `‚ùì **–°–ø—Ä–∞–≤–∫–∞**

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π  
/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
üåç –í—ã–±–æ—Ä —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
üí¨ –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

**–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:**
üåü –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ - –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚è∞ –ü—Ä–æ—Å—Ç—ã–µ - –∫—Ä–∞—Ç–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
üèÜ –° –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ - –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
üéÆ –ò–≥—Ä–∏–≤—ã–µ - –≤–µ—Å–µ–ª—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

–£–¥–∞—á–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è! üöÄ`;

  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]
    }
  };

  if (userMenuMessages.has(userId)) {
    try {
      await editMenuMessage(chatId, userMenuMessages.get(userId), helpMessage, keyboard);
    } catch (error) {
      await sendMenuMessage(chatId, helpMessage, keyboard, userId);
    }
  } else {
    await sendMenuMessage(chatId, helpMessage, keyboard, userId);
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function toggleNotifications(chatId, userId) {
  const data = loadData();
  const user = data.users.find(u => u.userId === userId);
  
  if (user) {
    user.enabled = !user.enabled;
    user.lastActive = new Date().toISOString();
    saveData(data);
    
    const status = user.enabled ? '–≤–∫–ª—é—á–µ–Ω—ã ‚úÖ' : '–≤—ã–∫–ª—é—á–µ–Ω—ã ‚ùå';
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const tempMessage = await bot.sendMessage(chatId, `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${status}`);
    
    // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(async () => {
      try {
        await bot.deleteMessage(chatId, tempMessage.message_id);
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å
      }
    }, 2000);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    setTimeout(() => showSettingsMenu(chatId, userId), 500);
  }
}

async function setUserTime(chatId, userId, time) {
  const data = loadData();
  const user = data.users.find(u => u.userId === userId);
  
  if (user) {
    user.time = time;
    user.lastActive = new Date().toISOString();
    saveData(data);
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const tempMessage = await bot.sendMessage(chatId, `‚è∞ –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${time}`);
    
    setTimeout(async () => {
      try {
        await bot.deleteMessage(chatId, tempMessage.message_id);
      } catch (error) {}
    }, 2000);
    
    setTimeout(() => showSettingsMenu(chatId, userId), 500);
  }
}

async function setUserTimezone(chatId, userId, timezone) {
  const data = loadData();
  const user = data.users.find(u => u.userId === userId);
  
  if (user) {
    user.timezone = timezone;
    user.lastActive = new Date().toISOString();
    saveData(data);
    
    const tempMessage = await bot.sendMessage(chatId, `üåç –ì–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${timezone}`);
    
    setTimeout(async () => {
      try {
        await bot.deleteMessage(chatId, tempMessage.message_id);
      } catch (error) {}
    }, 2000);
    
    setTimeout(() => showSettingsMenu(chatId, userId), 500);
  }
}

async function setUserType(chatId, userId, type) {
  const data = loadData();
  const user = data.users.find(u => u.userId === userId);
  
  if (user) {
    user.reminderType = type;
    user.lastActive = new Date().toISOString();
    saveData(data);
    
    const tempMessage = await bot.sendMessage(chatId, `üí¨ –¢–∏–ø —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${messageTypes[type]}`);
    
    setTimeout(async () => {
      try {
        await bot.deleteMessage(chatId, tempMessage.message_id);
      } catch (error) {}
    }, 2000);
    
    setTimeout(() => showSettingsMenu(chatId, userId), 500);
  }
}

async function sendTestNotification(chatId, userId) {
  const data = loadData();
  const user = data.users.find(u => u.userId === userId);
  
  if (user) {
    const messages = getMessagesForType(user.reminderType);
    const message = messages[Math.floor(Math.random() * messages.length)];
    
    const testMessage = await bot.sendMessage(chatId, `üß™ **–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:**\n\n${message}`, { parse_mode: 'Markdown' });
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    setTimeout(async () => {
      try {
        await bot.deleteMessage(chatId, testMessage.message_id);
      } catch (error) {}
    }, 10000);
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–µ–Ω—é –≤—Ä–µ–º–µ–Ω–∏ –∏ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
async function showTimeMenu(chatId, userId) {
  const timeButtons = [];
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
  for (let i = 0; i < timeSlots.length; i += 3) {
    const row = timeSlots.slice(i, i + 3).map(time => ({
      text: time,
      callback_data: `time_${time}`
    }));
    timeButtons.push(row);
  }
  
  timeButtons.push([{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data: 'back_to_settings' }]);

  const keyboard = { reply_markup: { inline_keyboard: timeButtons } };
  
  const message = '‚è∞ **–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:**';
  
  if (userMenuMessages.has(userId)) {
    try {
      await editMenuMessage(chatId, userMenuMessages.get(userId), message, keyboard);
    } catch (error) {
      await sendMenuMessage(chatId, message, keyboard, userId);
    }
  } else {
    await sendMenuMessage(chatId, message, keyboard, userId);
  }
}

async function showTimezoneMenu(chatId, userId) {
  const tzButtons = [];
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≥–æ—Ä–æ–¥–∞ –ø–æ 2 –≤ —Ä—è–¥
  const cities = Object.keys(timezones);
  for (let i = 0; i < cities.length; i += 2) {
    const row = cities.slice(i, i + 2).map(tz => ({
      text: `${tz}`,
      callback_data: `tz_${tz.replace(/ /g, '_')}`
    }));
    tzButtons.push(row);
  }
  
  tzButtons.push([{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data: 'back_to_settings' }]);

  const keyboard = { reply_markup: { inline_keyboard: tzButtons } };
  
  const message = 'üåç **–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:**';
  
  if (userMenuMessages.has(userId)) {
    try {
      await editMenuMessage(chatId, userMenuMessages.get(userId), message, keyboard);
    } catch (error) {
      await sendMenuMessage(chatId, message, keyboard, userId);
    }
  } else {
    await sendMenuMessage(chatId, message, keyboard, userId);
  }
}

async function showTypeMenu(chatId, userId) {
  const typeButtons = Object.entries(messageTypes).map(([key, value]) => [{
    text: value,
    callback_data: `type_${key}`
  }]);
  
  typeButtons.push([{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data: 'back_to_settings' }]);

  const keyboard = { reply_markup: { inline_keyboard: typeButtons } };
  
  const message = 'üí¨ **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:**';
  
  if (userMenuMessages.has(userId)) {
    try {
      await editMenuMessage(chatId, userMenuMessages.get(userId), message, keyboard);
    } catch (error) {
      await sendMenuMessage(chatId, message, keyboard, userId);
    }
  } else {
    await sendMenuMessage(chatId, message, keyboard, userId);
  }
}
